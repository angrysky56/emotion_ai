# Patch for main.py to fix ChromaDB batch conflict
# Apply this to the process_conversation endpoint

# Find this section (around line 1034-1041):
"""
        # Store memories and update profile in background
        background_tasks.add_task(vector_db.store_conversation, user_memory)
        background_tasks.add_task(vector_db.store_conversation, aura_memory)

        # Store Aura's emotional pattern (use 'aura' as the entity ID)
        if emotional_state_data:
            background_tasks.add_task(vector_db.store_emotional_pattern, emotional_state_data, "aura")

        # Store user's emotional pattern for analysis  
        if user_emotional_state:
            background_tasks.add_task(vector_db.store_emotional_pattern, user_emotional_state, request.user_id)
"""

# Replace with this:
"""
        # Store memories sequentially to prevent batch conflicts
        async def store_all_memories():
            try:
                # Store user memory first
                await vector_db.store_conversation(user_memory)
                
                # Small delay to allow ChromaDB compaction to complete
                await asyncio.sleep(0.1)
                
                # Store Aura memory
                await vector_db.store_conversation(aura_memory)
                
                # Store emotional patterns
                if emotional_state_data:
                    await vector_db.store_emotional_pattern(emotional_state_data, "aura")
                    
                if user_emotional_state:
                    await vector_db.store_emotional_pattern(user_emotional_state, request.user_id)
                    
            except Exception as e:
                logger.error(f"Failed to store memories: {e}")
                # Don't fail the whole request if storage fails
        
        # Run storage as single background task
        background_tasks.add_task(store_all_memories)
"""

# Also add this import at the top of main.py if not present:
# import asyncio
