{
  "metadata": [
    {
      "id": 0,
      "text": "# \ud83e\udde0 Meta-Cognitive AI Coding Protocol \n\n## \ud83d\udee0 Init\n- **Observe**: Understand repo structure, design patterns, domain architecture\n- **Defer**: Refrain from code generation until system understanding reaches threshold\n- **Integrate**: Align with existing conventions and architectural philosophy\n- **Meta-Validate**:  \n  - **Consistency**: Ensure internal alignment of design goals and constraints  \n  - **Completeness**: Confirm all relevant design factors are considered  \n  - **Soundness**: Ensure proposed changes logically follow from assumptions  \n  - **Expressiveness**: Allow edge-case accommodation within general structure\n\n## \ud83d\ude80 Execute\n- **Target**: Modify primary source directly (no workaround scripts)\n- **Scope**: Enact minimum viable change to fix targeted issue\n- **Leverage**: Prefer existing abstractions over introducing new ones\n- **Preserve**: Assume complexity is intentional; protect advanced features\n- **Hypothesize**:  \n  - \"If X is modified, then Y should change in Z way\"\n- **Test**:  \n  - Create",
      "frame": 0,
      "length": 1023
    },
    {
      "id": 1,
      "text": "Z way\"\n- **Test**:  \n  - Create local validations specific to this hypothesis\n\n## \ud83d\udd0e Validate\n- **Test**: Define and run specific validation steps for each change\n- **Verify**: Confirm no degradation of existing behaviors or dependencies\n- **Review**:  \n  - Self-audit for consistency with codebase patterns  \n  - Check for unintended architectural side effects\n- **Reflect & Refactor**:  \n  - Log rationale behind decisions  \n  - Adjust reasoning if change outcomes differ from expectations\n\n## \ud83d\udce1 Communicate++\n- **What**: Issue + root cause, framed in architectural context\n- **Where**: File + line-level references\n- **How**: Precise code delta required\n- **Why**: Rationale including discarded alternatives\n- **Trace**: Show logical steps from diagnosis to decision\n- **Context**: Identify impacted modules, dependencies, or workflows\n\n## \u26a0\ufe0f Fail-Safe Intelligence\n- **Avoid**:  \n  - Workaround scripts or non-integrated changes  \n  - Oversimplification of complex components  \n  - Premature solutioning before contextual",
      "frame": 1,
      "length": 1024
    },
    {
      "id": 2,
      "text": "re solutioning before contextual analysis  \n  - Inconsistent or redundant implementations\n- **Flag Uncertainty**:  \n  - Surface confidence level and assumptions  \n  - Suggest deeper validation when confidence is low\n- **Risk-Aware**:  \n  - Estimate impact level of change (low/medium/high)  \n  - Guard against invisible coupling effects",
      "frame": 2,
      "length": 336
    }
  ],
  "chunk_to_frame": {
    "0": 0,
    "1": 1,
    "2": 2
  },
  "frame_to_chunks": {
    "0": [
      0
    ],
    "1": [
      1
    ],
    "2": [
      2
    ]
  },
  "config": {
    "qr": {
      "version": 35,
      "error_correction": "M",
      "box_size": 5,
      "border": 3,
      "fill_color": "black",
      "back_color": "white"
    },
    "codec": "h265",
    "chunking": {
      "chunk_size": 1024,
      "overlap": 32
    },
    "retrieval": {
      "top_k": 5,
      "batch_size": 100,
      "max_workers": 4,
      "cache_size": 1000
    },
    "embedding": {
      "model": "all-MiniLM-L6-v2",
      "dimension": 384
    },
    "index": {
      "type": "Flat",
      "nlist": 100
    },
    "llm": {
      "model": "gemini-2.0-flash-exp",
      "max_tokens": 8192,
      "temperature": 0.1,
      "context_window": 32000
    },
    "chat": {
      "max_history": 10,
      "context_chunks": 5
    },
    "performance": {
      "prefetch_frames": 50,
      "decode_timeout": 10
    }
  }
}