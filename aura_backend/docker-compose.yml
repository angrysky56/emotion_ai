version: '3.8'

services:
  aura-backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: aura-backend
    ports:
      - "8000:8000"  # Main API
      - "8001:8001"  # MCP Server
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CHROMA_PERSIST_DIRECTORY=/app/aura_chroma_db
      - AURA_DATA_DIRECTORY=/app/aura_data
    volumes:
      - aura_data:/app/aura_data
      - aura_db:/app/aura_chroma_db
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aura-network

  # Optional: Add monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: aura-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - aura-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: aura-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=aura_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    networks:
      - aura-network
    profiles:
      - monitoring

  # Optional: Redis for advanced caching and session management
  redis:
    image: redis:7-alpine
    container_name: aura-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - aura-network
    profiles:
      - cache

volumes:
  aura_data:
    driver: local
  aura_db:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  aura-network:
    driver: bridge
